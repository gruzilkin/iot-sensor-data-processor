@model web.Models.ChartModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="color-scheme" content="dark light">
    <title>Sensor data</title>
    <link rel="stylesheet" href="/css/site.css" />
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.2.0/dist/echarts.min.js" integrity="sha256-K7QvUcgMJTtzv+fWKp0Bcp+sA6JihMs7BGHDigKFu9o=" crossorigin="anonymous"></script>
    <script src="/js/site.js" asp-append-version="true"></script>
</head>
<body>
    <div class="dashboard">
        <div id="ppm" class="item"></div>
        <div id="voc" class="item"></div>
        <div id="temperature" class="item"></div>
        <div id="humidity" class="item"></div>
      </div>
    <div id="chart" class="chart"></div>
</body>
</html>

<script type="application/javascript">
    chartData.temperature = [
        @Html.Raw(string.Join(",", Model.Temperature.Select(p => $"[{p.ReceivedAt}, {p.Temperature}]")))
    ];

    chartData.humidity = [
        @Html.Raw(string.Join(",", Model.Humidity.Select(p => $"[{p.ReceivedAt}, {p.Humidity}]")))
    ];

    chartData.ppm = [
        @Html.Raw(string.Join(",", Model.Ppm.Select(p => $"[{p.ReceivedAt}, {p.Ppm}]")))
    ];

    chartData.voc = [
        @Html.Raw(string.Join(",", Model.Voc.Select(p => $"[{p.ReceivedAt}, {p.Voc}]")))
    ];
</script>

<script type="application/javascript">
    window.addEventListener("load", function() {
        renderChart();
        start("@Model.Device");

        chart.on('datazoom', function(event) {
        if (event.batch)
        {
            event = event.batch[0]
        }

        var start = event.start / 100
        var end = event.end / 100

        scheduleFetchUpdates(start, end)
    })
    });

    var fetchUpdateTaskId;
    function scheduleFetchUpdates(start, end) {
        if (fetchUpdateTaskId) {
            clearTimeout(fetchUpdateTaskId);
        }
        fetchUpdateTaskId = setTimeout(function () {
            fetchUpdates(start, end)
        }, 100);
    }

    function fetchUpdates(start, end) {
        fetch(`/Chart/Json/@Model.Device?start=${start}&end=${end}`)
        .then(function (response) {
            response.json().then(function(data) {
                mergeUpdates(data)
                console.log(data)
            })
        });
    }

    function mergeUpdates(updateData) {
        var properties = ['temperature', 'humidity', 'ppm', 'voc']

        for (var property of properties) {
            var tmp = new Map()
            chartData[property].forEach(e => tmp.set(e[0], e[1]))
            updateData[property].forEach(e => tmp.set(e.receivedAt, e[property]))
            chartData[property] = []
            for(var timestamp of [...tmp.keys()].sort()) {chartData[property].push([timestamp, tmp.get(timestamp)])}
        }

        renderChart();
    }
</script>

